


// Z INTERNETU PORZEBNY AGENT ?
//pipeline {
//  agent { label "linux" }
//  stages {
//    stage("build") {
//      steps {
//        sh """
//          docker build -t hello_there .
//        """
//      }
//    }
//    stage("run") {
//      steps {
//        sh """
//          docker run --rm hello_there
//        """
//      }
//    }
//  }
//}








//pipeline {
//  agent any
//  stages {
//    stage("build") {
//      steps {
//        sh """
//          docker build -t hello_there .
//        """
//      }
//    }
//    stage("run") {
//      steps {
//        sh """
//          docker run --rm hello_there
//        """
//      }
//    }
//  }
//}





//pipeline {
//   agent { dockerfile true }
//  stages {
//    stage("build") {
//      steps {
//        sh 'docker build -t docker_start .'
//      }
//    }
//    stage("run") {
//      steps {
//        sh 'docker run --rm docker_start'
//      }
//    }
//  }
//}


//pipeline {
//    agent { dockerfile true }
//    stages {
//        stage('Test') {
//            steps {
//                sh 'node --version'
//                sh 'svn --version'
//            }
//        }
//    }
//}

//pipeline {
//  agent any
//  stages {
//    stage("build") {
//      steps {
//        script {
//		sh 'docker build -t docker_start .'
//		}
//      }
//    }
//    stage("run") {
//      steps {
//        sh """
//          docker run --rm docker_start
//        """
//      }
//    }
//  }
//}


//node {
//    def app
//
//    stage('Clone repository') {
//        /* Let's make sure we have the repository cloned to our workspace */
//
//        checkout scm
//    }
//
//    stage('Build image') {
//        /* This builds the actual image; synonymous to
//         * docker build on the command line */
//
//        app = docker.build("getintodevops/hellonode")
//    }
//
//    stage('Test image') {
//        /* Ideally, we would run a test framework against our image.
//         * For this example, we're using a Volkswagen-type approach ;-) */
//
//        app.inside {
//            sh 'echo "Tests passed"'
//        }
//    }
//
//    stage('Push image') {
//        /* Finally, we'll push the image with two tags:
//         * First, the incremental build number from Jenkins
//         * Second, the 'latest' tag.
//         * Pushing multiple tags is cheap, as all the layers are reused. */
//        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
//            app.push("${env.BUILD_NUMBER}")
//            app.push("latest")
//        }
//    }
//}